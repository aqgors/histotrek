package com.agors.application.form;

import com.agors.application.window.MenuScreen;
import com.agors.application.window.MessageBox;
import com.agors.domain.entity.User;
import com.agors.domain.validation.SettingsValidator;
import com.agors.infrastructure.persistence.impl.UserDaoImpl;
import com.agors.infrastructure.util.PasswordUtil;
import com.agors.infrastructure.util.SessionContext;
import com.agors.infrastructure.util.ThemeManager;
import com.agors.infrastructure.util.enums.ThemeType;
import javafx.animation.ScaleTransition;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Cursor;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.effect.DropShadow;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;

public class SettingsForm {

    private final Stage parentStage;
    private final SettingsValidator validator = new SettingsValidator();
    private final UserDaoImpl userDao = new UserDaoImpl();
    private final User currentUser = SessionContext.getCurrentUser();
    private Stage currentSettingsStage;

    public SettingsForm(Stage parentStage) {
        this.parentStage = parentStage;
    }

    public void show(Stage settingsStage) {
        this.currentSettingsStage = settingsStage;
        parentStage.hide();
        settingsStage.setFullScreen(parentStage.isFullScreen());
        settingsStage.setFullScreenExitHint("");

        Button backBtn = createBackButton();
        backBtn.setOnAction(e -> {
            settingsStage.close();
            Stage userFormStage = new Stage();
            int userId = currentUser.getId();
            boolean isFullScreen = parentStage.isFullScreen();
            new UserForm().start(userFormStage, userId, isFullScreen);
        });

        Text title = new Text("Settings");
        title.setFont(Font.font("Arial", 14));
        title.setFill(Color.BLACK);

        HBox topBar = new HBox(10, backBtn, title);
        topBar.setAlignment(Pos.CENTER_LEFT);
        topBar.setPadding(new Insets(15));

        VBox content = new VBox(20,
            createSection("Profile",
                createStyledButton("üë§ –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", e -> {
                    if (confirmPassword(settingsStage)) handleChangeUsername(settingsStage);
                }),
                createStyledButton("üìß –û–Ω–æ–≤–∏—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É", e -> {
                    if (confirmPassword(settingsStage)) handleChangeEmail(settingsStage);
                }),
                createStyledButton("üîë –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å", e -> {
                    if (confirmPassword(settingsStage)) handleChangePassword(settingsStage);
                }),
                createStyledButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç", e -> {
                    if (confirmPassword(settingsStage)) handleDeleteAccount(settingsStage);
                })
            ),
            createSection("Personalization",
                createThemeChanger(),
                createLanguageChoice()
            ),
            createSection("Administration",
                createStyledButton("üëë –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", e -> handleAdminAccess(settingsStage))
            ),
            createSection("Support & Info",
                createStaticText("Histotrek ‚Äî –¥–æ–≤—ñ–¥–Ω–∏–∫ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –º—ñ—Å—Ü—å –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤."),
                createStaticText("–í–µ—Ä—Å—ñ—è: 1.0"),
                createStaticText("–†–æ–∑—Ä–æ–±–Ω–∏–∫: agors"),
                createEmailLink("c.kovalchuk.oleksandr@student.uzhnu.edu.ua"),
                createStaticText("–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É!")
            )
        );
        content.setPadding(new Insets(20));

        ScrollPane scrollPane = new ScrollPane(content);
        scrollPane.setFitToWidth(true);
        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);

        BorderPane root = new BorderPane(scrollPane);
        root.setTop(topBar);

        Scene scene = new Scene(root, 800, 600);

        scene.setOnKeyPressed(evt -> {
            if (evt.getCode() == KeyCode.F11) {
                settingsStage.setFullScreen(!settingsStage.isFullScreen());
            }
        });

        settingsStage.setScene(scene);
        settingsStage.setTitle("Settings");
        settingsStage.setMinWidth(800);
        settingsStage.setMinHeight(600);
        settingsStage.show();
    }

    private Label createStaticText(String text) {
        Label label = new Label(text);
        label.setFont(Font.font("Arial", 13));
        label.setWrapText(true);
        label.setTextFill(Color.web("#333"));
        return label;
    }

    private Hyperlink createEmailLink(String email) {
        Hyperlink link = new Hyperlink("‚úâ –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º: " + email);
        link.setFont(Font.font("Arial", 13));
        link.setTextFill(Color.DARKBLUE);
        link.setBorder(Border.EMPTY);
        link.setOnAction(e -> {
            String uri = "https://mail.google.com/mail/?view=cm&fs=1&to=" + email;
            try {
                java.awt.Desktop.getDesktop().browse(new java.net.URI(uri));
            } catch (Exception ex) {
                MessageBox.show("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—à—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç.");
            }
        });
        return link;
    }

    private void handleAdminAccess(Stage owner) {
        if (!confirmPassword(owner)) return;

        // –ü–µ—Ä–µ—á–∏—Ç–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ
        User freshUser = userDao.getUserById(currentUser.getId());
        if (freshUser == null) return;

        SessionContext.setCurrentUser(freshUser); // –æ–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é
        if (freshUser.getRole().equalsIgnoreCase("ADMIN")) {
            owner.close();
            Stage adminStage = new Stage();
            new AdminForm(owner).show(adminStage);
            return;
        }

        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø");
        dialog.setHeaderText("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        dialog.initOwner(owner);

        var result = dialog.showAndWait();
        if (result.isEmpty()) return;

        if ("0000".equals(result.get())) {
            freshUser.setRole("ADMIN");
            userDao.updateUser(freshUser);
            SessionContext.setCurrentUser(freshUser); // –æ–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é —â–µ —Ä–∞–∑

            MessageBox.show("–î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ", "–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
            owner.close();
            Stage adminStage = new Stage();
            new AdminForm(owner).show(adminStage);
        } else {
            MessageBox.show("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
    }

    private Button createThemeChanger() {
        Button btn = new Button("üé® –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —ñ–Ω—à—É —Ç–µ–º—É –¥–æ –º–µ–Ω—é");
        btn.setFont(Font.font("Arial", 14));
        btn.setStyle("-fx-background-color: #c2b280; -fx-text-fill: black; -fx-background-radius: 8;");
        btn.setCursor(Cursor.HAND);
        btn.setEffect(new DropShadow(4, Color.rgb(0, 0, 0, 0.2)));

        btn.setOnAction(e -> {
            ChoiceDialog<String> dialog = new ChoiceDialog<>("Default", "Default", "Light", "Dark");
            dialog.setTitle("–¢–µ–º–∞");
            dialog.setHeaderText("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
            dialog.setContentText("–¢–µ–º–∞:");

            dialog.showAndWait().ifPresent(choice -> {
                ThemeType selected = ThemeType.valueOf(choice.toUpperCase());
                ThemeManager.setTheme(selected);
            });
        });

        return btn;
    }

    private VBox createSection(String heading, javafx.scene.Node... controls) {
        Text h = new Text(heading);
        h.setFont(Font.font("Arial", 14));
        h.setFill(Color.BLACK);
        VBox box = new VBox(10, h);
        box.setPadding(new Insets(10));
        box.setStyle("-fx-background-color: white; -fx-border-color: #d3d3d3; -fx-border-radius: 8; -fx-background-radius: 8;");
        box.getChildren().addAll(controls);
        return box;
    }

    private Button createStyledButton(String text, javafx.event.EventHandler<javafx.event.ActionEvent> handler) {
        Button btn = new Button(text);
        btn.setFont(Font.font("Arial", 14));
        btn.setMaxWidth(Double.MAX_VALUE);
        btn.setStyle("-fx-background-color: #c2b280; -fx-text-fill: black; -fx-background-radius: 8;");
        btn.setCursor(Cursor.HAND);
        btn.setOnMouseEntered(e -> btn.setStyle("-fx-background-color: #a99e75; -fx-text-fill: black; -fx-background-radius: 8;"));
        btn.setOnMouseExited(e -> btn.setStyle("-fx-background-color: #c2b280; -fx-text-fill: black; -fx-background-radius: 8;"));
        btn.setEffect(new DropShadow(4, Color.rgb(0, 0, 0, 0.2)));
        if (handler != null) btn.setOnAction(handler);
        return btn;
    }

    private Button createStyledButton(String text) {
        return createStyledButton(text, null);
    }

    private ChoiceBox<String> createLanguageChoice() {
        ChoiceBox<String> cb = new ChoiceBox<>();
        cb.getItems().addAll("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "English");
        cb.setValue("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞");
        cb.setStyle("-fx-font-size: 14px; -fx-text-fill: black;");
        return cb;
    }

    private Button createBackButton() {
        StackPane circle = new StackPane();
        circle.setPrefSize(36, 36);
        circle.setStyle("-fx-background-color: white; -fx-background-radius: 18;");
        circle.setEffect(new DropShadow(4, Color.rgb(0, 0, 0, 0.2)));

        Text arrow = new Text("\u2190");
        arrow.setFont(Font.font("Arial", 14));
        arrow.setFill(Color.web("#3e2723"));
        circle.getChildren().add(arrow);

        Button btn = new Button();
        btn.setGraphic(circle);
        btn.setBackground(Background.EMPTY);
        btn.setCursor(Cursor.HAND);

        ScaleTransition enter = new ScaleTransition(Duration.millis(150), circle);
        enter.setToX(1.1);
        enter.setToY(1.1);
        ScaleTransition exit = new ScaleTransition(Duration.millis(150), circle);
        exit.setToX(1.0);
        exit.setToY(1.0);
        btn.setOnMouseEntered(e -> enter.playFromStart());
        btn.setOnMouseExited(e -> exit.playFromStart());

        return btn;
    }

    private void handleChangeUsername(Stage owner) {
        String newName = askInput("–ù–æ–≤–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", owner);
        if (newName == null) return;

        String err = validator.validateUsername(newName, currentUser.getUsername());
        if (err != null) {
            MessageBox.show("–ü–æ–º–∏–ª–∫–∞", err);
            return;
        }

        currentUser.setUsername(newName);
        userDao.updateUser(currentUser);
        MessageBox.show("–£—Å–ø—ñ—Ö", "–Ü–º'—è –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
    }

    private void handleChangeEmail(Stage owner) {
        String newEmail = askInput("–ù–æ–≤–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞:", owner);
        if (newEmail == null) return;

        String err = validator.validateEmail(newEmail, currentUser.getEmail());
        if (err != null) {
            MessageBox.show("–ü–æ–º–∏–ª–∫–∞", err);
            return;
        }

        currentUser.setEmail(newEmail);
        userDao.updateUser(currentUser);
        MessageBox.show("–£—Å–ø—ñ—Ö", "Email –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
    }

    private void handleChangePassword(Stage owner) {
        String newPass = askInput("–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:", owner);
        if (newPass == null) return;

        String err = validator.validatePassword(newPass);
        if (err != null) {
            MessageBox.show("–ü–æ–º–∏–ª–∫–∞", err);
            return;
        }

        currentUser.setPasswordHash(PasswordUtil.hashPassword(newPass));
        userDao.updateUser(currentUser);
        MessageBox.show("–£—Å–ø—ñ—Ö", "–ü–∞—Ä–æ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
    }

    private void handleDeleteAccount(Stage owner) {
        boolean confirmed = MessageBox.showConfirm("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç?");
        if (!confirmed) return;

        userDao.deleteUser(currentUser.getId());
        MessageBox.show("–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ", "–í–∞—à –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ");
        owner.close();
        new MenuScreen().show(new Stage());
    }

    private boolean confirmPassword(Stage owner) {
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è");
        dialog.setHeaderText("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å");
        dialog.initOwner(owner);

        var res = dialog.showAndWait();
        if (res.isEmpty()) return false;

        String inputHash = PasswordUtil.hashPassword(res.get());
        if (!inputHash.equals(currentUser.getPasswordHash())) {
            MessageBox.show("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å");
            return false;
        }
        return true;
    }

    private String askInput(String msg, Stage owner) {
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("–ó–º—ñ–Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è");
        dialog.setHeaderText(msg);
        dialog.initOwner(owner);
        return dialog.showAndWait().orElse(null);
    }
}