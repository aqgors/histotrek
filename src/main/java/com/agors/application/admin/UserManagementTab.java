package com.agors.application.admin;

import com.agors.domain.entity.User;
import com.agors.infrastructure.persistence.impl.UserDaoImpl;
import com.agors.infrastructure.util.I18n;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.*;

import java.util.stream.Collectors;

/**
 * –í–∫–ª–∞–¥–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
 * <p>
 * –ù–∞–¥–∞—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —ó—Ö –∑–∞ —ñ–º‚Äô—è–º –∞–±–æ email,
 * –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–æ–ª—ñ (USER / ADMIN) —Ç–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –∫—Ä—ñ–º –ø–æ—Ç–æ—á–Ω–æ–≥–æ.
 * </p>
 * –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º JavaFX UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤.
 *
 * @author agors
 * @version 1.0
 */
public class UserManagementTab extends VBox {

    /** DAO-–æ–± º—î–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. */
    private final UserDaoImpl userDao = new UserDaoImpl();
    /** –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä—É –ø–æ—à—É–∫—É. */
    private final ObservableList<User> users = FXCollections.observableArrayList();
    /** –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –∫–∞—Ä—Ç–æ–∫. */
    private final VBox userListContainer = new VBox(10);

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤–∫–ª–∞–¥–∫—É –∑ –ø–æ—à—É–∫–æ–º, –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–∏–º —Å–ø–∏—Å–∫–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
     * —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º —Å—Ç–∏–ª—ñ–≤.
     */
    public UserManagementTab() {
        getStylesheets().add(getClass().getResource("/style/user-tab.css").toExternalForm());

        setPadding(new Insets(20));
        setSpacing(15);
        setAlignment(Pos.TOP_CENTER);

        TextField searchField = new TextField();
        searchField.setPromptText(I18n.get("user_search_prompt", "–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞..."));
        searchField.setMaxWidth(300);
        searchField.getStyleClass().add("text-field");

        searchField.textProperty().addListener((obs, oldVal, newVal) -> updateUserList(newVal));

        userListContainer.setAlignment(Pos.TOP_CENTER);

        ScrollPane scrollPane = new ScrollPane(userListContainer);
        scrollPane.setFitToWidth(true);
        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
        scrollPane.getStyleClass().add("scroll-pane");

        getChildren().addAll(searchField, scrollPane);
        updateUserList("");
    }

    /**
     * –û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∫–∞–∑–∞–Ω–æ–º—É —Ä—è–¥–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.
     *
     * @param filter —Ç–µ–∫—Å—Ç —Ñ—ñ–ª—å—Ç—Ä–∞ (—ñ–º º—è –∞–±–æ email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
     */
    private void updateUserList(String filter) {
        users.setAll(userDao.getAllUsers().stream()
            .filter(u -> u.getUsername().toLowerCase().contains(filter.toLowerCase()) ||
                u.getEmail().toLowerCase().contains(filter.toLowerCase()))
            .collect(Collectors.toList()));

        userListContainer.getChildren().clear();
        for (User user : users) {
            userListContainer.getChildren().add(createUserCard(user));
        }
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ—á–Ω—É –∫–∞—Ä—Ç–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —ñ–º–µ–Ω—ñ, email,
     * –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ —Ç–∞ –∫–Ω–æ–ø–∫–æ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
     *
     * @param user –æ–± º—î–∫—Ç {@link User}, —è–∫–∏–π –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ —É —Å–ø–∏—Å–∫—É
     * @return –∫–æ–º–ø–æ–Ω–µ–Ω—Ç {@link HBox} –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    private HBox createUserCard(User user) {
        HBox card = new HBox(20);
        card.setPadding(new Insets(10));
        card.setAlignment(Pos.CENTER_LEFT);
        card.getStyleClass().add("user-card");

        VBox infoBox = new VBox(5);
        Label name = new Label("üë§ " + user.getUsername());
        Label email = new Label("üìß " + user.getEmail());
        name.getStyleClass().add("label");
        email.getStyleClass().add("label");
        infoBox.getChildren().addAll(name, email);

        ComboBox<String> roleBox = new ComboBox<>();
        roleBox.getItems().addAll("USER", "ADMIN");
        roleBox.setValue(user.getRole().toUpperCase());
        roleBox.getStyleClass().add("combo-box");

        roleBox.setOnAction(e -> {
            String selected = roleBox.getValue();
            user.setRole(selected);
            userDao.updateUser(user);
        });

        Button deleteBtn = new Button("üóë " + I18n.get("delete_user_btn", "–í–∏–¥–∞–ª–∏—Ç–∏"));
        deleteBtn.getStyleClass().add("button-delete");
        deleteBtn.setDisable(user.getId() == com.agors.infrastructure.util.SessionContext.getCurrentUser().getId());

        deleteBtn.setOnAction(e -> {
            boolean confirm = new Alert(Alert.AlertType.CONFIRMATION,
                I18n.get("confirm_delete_user", "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ") + user.getUsername() + "?",
                ButtonType.YES, ButtonType.NO)
                .showAndWait().filter(ButtonType.YES::equals).isPresent();
            if (confirm) {
                userDao.deleteUser(user.getId());
                updateUserList("");
            }
        });

        card.getChildren().addAll(infoBox, roleBox, deleteBtn);
        HBox.setHgrow(infoBox, Priority.ALWAYS);
        return card;
    }
}
